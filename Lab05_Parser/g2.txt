N = { program, declaration, type, identifier, number, term, const, compound_statement, statement_list, statement, simple_statement, struct_statement, if_statement, for_statement, while_statement, assign_statement, expression, io_statement, condition, relation }
E = { start, integer, character, string, [, ], {, }, ;, +, -, *, /, (, ), <, <=, ==, !=, >=, >, while, for, if, else, read, write }
S = program
P = {
    program -> startcompound_statement,
    declaration -> typeidentifier,
    type -> string | integer | character,
    compound_statement -> {statement_list},
    statement_list -> statement | statement;statement_list,
    statement -> simple_statement; | struct_statement,
    simple_statement -> assign_statement | io_statement | declaration,
    struct_statement -> compound_statement | if_statement | while_statement | for_statement,
    if_statement -> ifconditionstatementelsestatement,
    for_statement -> for(numberassign_statement;condition;assign_statement)statement,
    while_statement -> while(condition)statement,
    assign_statement -> identifier-expression,
    expression -> expression+term | expression-term,
    term -> term * factor | term / factor,
    io_statement -> read identifier | write identifier,
    condition -> (identifierrelationconst),
    relation -> < | <= | == | != | >= | >
}